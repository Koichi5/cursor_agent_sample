name: Flutter Golden Tests

on:
  pull_request:
    paths:
      - "lib/views/**"
      - "test/views/**"
      - "pubspec.yaml"

permissions:
  contents: write
  pull-requests: write

jobs:
  golden_tests:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.4"
          channel: "stable"
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Get changed files in this PR
        id: changed-files
        uses: tj-actions/changed-files@v42
        with:
          files: |
            lib/views/**/*.dart
          base_sha: ${{ github.event.pull_request.base.sha }}
          sha: ${{ github.event.pull_request.head.sha }}

      - name: Check for new views
        if: steps.changed-files.outputs.any_changed == 'true'
        id: check-new-views
        run: |
          has_new_views=false
          new_view_files=""
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ $file == lib/views/* ]]; then
              component_name=$(basename ${file%.*})
              test_dir="test/views/${component_name}_test"
              if [ ! -d "$test_dir" ]; then
                has_new_views=true
                if [ -n "$new_view_files" ]; then
                  new_view_files="$new_view_files,"
                fi
                new_view_files="$new_view_files$file"
                echo "New view detected: $component_name"
              fi
            fi
          done
          echo "has_new_views=$has_new_views" >> $GITHUB_OUTPUT
          echo "new_view_files=$new_view_files" >> $GITHUB_OUTPUT

      - name: Create Golden Test files for new views
        if: steps.check-new-views.outputs.has_new_views == 'true'
        run: |
          IFS=',' read -ra view_files <<< "${{ steps.check-new-views.outputs.new_view_files }}"
          for file in "${view_files[@]}"; do
            component_name=$(basename ${file%.*})
            test_dir="test/views/${component_name}_test"
            test_file="$test_dir/${component_name}_test.dart"

            # Create test directory
            mkdir -p "$test_dir"

            # Create test file from template without indentation
            cat > "$test_file" << EOL
              import 'package:alchemist/alchemist.dart';
              import 'package:cursor_agent_sample/views/$component_name/$component_name.dart';
              import 'package:flutter/material.dart';
              import 'package:flutter_test/flutter_test.dart';

              import '../../support/alchemist/golden_test_device_scenario.dart';

              @Tags(['golden'])
              void main() {
                group('${component_name} Golden Test', () {
                  Widget buildMyApp() {
                    return MaterialApp(
                      theme: ThemeData(
                        useMaterial3: true,
                        colorScheme: ColorScheme.fromSeed(
                          seedColor: Colors.deepPurple,
                          brightness: Brightness.light,
                        ),
                      ),
                      home: const ${component_name}(),
                    );
                  }

                  final phonePortrait = Device.phonePortrait;

                  goldenTest(
                    'Default',
                    fileName: '${component_name}_default',
                    builder: () {
                      return GoldenTestGroup(
                        columns: 1,
                        children: [
                          GoldenTestDeviceScenario(
                            name: phonePortrait.name,
                            device: phonePortrait,
                            builder: () => buildMyApp(),
                          ),
                        ],
                      );
                    },
                  );
                });
              }
            EOL
            echo "Created Golden Test file for $component_name"
          done

      - name: Initialize Golden images for new views
        if: steps.check-new-views.outputs.has_new_views == 'true'
        run: |
          IFS=',' read -ra view_files <<< "${{ steps.check-new-views.outputs.new_view_files }}"
          for file in "${view_files[@]}"; do
            component_name=$(basename ${file%.*})
            test_path="test/views/${component_name}_test/${component_name}_test.dart"
            test_dir="test/views/${component_name}_test"

            echo "Initializing Golden Test for $component_name"
            mkdir -p "$test_dir/goldens/ci"
            mkdir -p "$test_dir/failures"
            flutter test --update-goldens "$test_path"

            # Find the actual generated golden file
            golden_file=$(find "$test_dir/goldens/ci" -type f -name "*.png" | head -n 1)
            if [ -n "$golden_file" ]; then
              cp "$golden_file" "$test_dir/failures/my_app_default_masterImage.png"
              cp "$golden_file" "$test_dir/failures/my_app_default_testImage.png"
            else
              echo "No golden file found for $component_name"
              exit 1
            fi
          done

      - name: Create base images
        if: steps.check-ui-changes.outputs.has_ui_changes == 'true'
        run: |
          git checkout -f ${{ github.event.pull_request.base.sha }}
          flutter pub get
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ $file == lib/views/* ]]; then
              component_name=$(basename ${file%.*})
              test_path="test/views/${component_name}_test/${component_name}_test.dart"
              test_dir="test/views/${component_name}_test"
              if [ -f "$test_path" ]; then
                echo "Running Golden Test for $component_name (base)"
                flutter test --update-goldens "$test_path"
                golden_file=$(find "$test_dir/goldens/ci" -type f -name "*.png" | head -n 1)
                if [ -n "$golden_file" ]; then
                  mkdir -p "$test_dir/failures"
                  cp "$golden_file" "$test_dir/failures/my_app_default_masterImage.png"
                else
                  echo "No golden file found for $component_name"
                  exit 1
                fi
              fi
            fi
          done

      - name: Create test images
        if: steps.check-ui-changes.outputs.has_ui_changes == 'true'
        run: |
          git checkout -f ${{ github.event.pull_request.head.sha }}
          flutter pub get
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ $file == lib/views/* ]]; then
              component_name=$(basename ${file%.*})
              test_path="test/views/${component_name}_test/${component_name}_test.dart"
              test_dir="test/views/${component_name}_test"
              if [ -f "$test_path" ]; then
                echo "Running Golden Test for $component_name (test)"
                flutter test --update-goldens "$test_path"
                golden_file=$(find "$test_dir/goldens/ci" -type f -name "*.png" | head -n 1)
                if [ -n "$golden_file" ]; then
                  mkdir -p "$test_dir/failures"
                  cp "$golden_file" "$test_dir/failures/my_app_default_testImage.png"
                else
                  echo "No golden file found for $component_name"
                  exit 1
                fi
              fi
            fi
          done

      - name: Check for image differences
        if: steps.check-ui-changes.outputs.has_ui_changes == 'true'
        id: check-image-differences
        run: |
          has_changes=false
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ $file == lib/views/* ]]; then
              component_name=$(basename ${file%.*})
              test_dir="test/views/${component_name}_test"
              master_image="$test_dir/failures/my_app_default_masterImage.png"
              test_image="$test_dir/failures/my_app_default_testImage.png"
              if [ -f "$master_image" ] && [ -f "$test_image" ]; then
                if ! cmp -s "$master_image" "$test_image"; then
                  has_changes=true
                  break
                fi
              fi
            fi
          done
          echo "has_image_differences=$has_changes" >> $GITHUB_OUTPUT

      - name: Commit and push images
        if: steps.check-ui-changes.outputs.has_ui_changes == 'true' && steps.check-image-differences.outputs.has_image_differences == 'true'
        id: commit-images
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add test/views/*/failures/*.png
          git commit -m "test: Update Golden Test images [skip ci]" || echo "No changes to commit"
          git push origin HEAD:${{ github.head_ref }} || echo "No changes to push"
          # Store the new commit SHA
          echo "new_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Generate comparison markdown
        if: steps.check-ui-changes.outputs.has_ui_changes == 'true' && steps.check-image-differences.outputs.has_image_differences == 'true'
        id: generate-markdown
        run: |
          echo "Generating comparison markdown..."
          # Use base SHA for Before images and new commit SHA for After images
          base_url="https://raw.githubusercontent.com/${{ github.repository }}/${{ github.event.pull_request.base.sha }}"
          head_url="https://raw.githubusercontent.com/${{ github.repository }}/${{ steps.commit-images.outputs.new_sha }}"

          # Create a JSON array for tables
          echo "[" > tables.json
          first=true

          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ $file == lib/views/* ]]; then
              component_name=$(basename ${file%.*})
              test_dir="test/views/${component_name}_test"
              if [ -d "$test_dir" ]; then
                if [ "$first" = true ]; then
                  first=false
                else
                  echo "," >> tables.json
                fi
                echo "{\"Component\":\"${component_name}\",\"Before\":\"![Before](${base_url}/$test_dir/failures/my_app_default_masterImage.png?raw=true)\",\"After\":\"![After](${head_url}/$test_dir/failures/my_app_default_testImage.png?raw=true)\"}" >> tables.json
              fi
            fi
          done
          echo "]" >> tables.json

          # Store the component names for the description
          changed_components=""
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ $file == lib/views/* ]]; then
              component_name=$(basename ${file%.*})
              changed_components="$changed_components- $component_name\n"
            fi
          done
          echo "changed_components=$changed_components" >> $GITHUB_OUTPUT

      - name: Create comparison table
        if: steps.check-ui-changes.outputs.has_ui_changes == 'true' && steps.check-image-differences.outputs.has_image_differences == 'true'
        uses: gazab/create-markdown-table@v1
        id: create_table
        with:
          file: ./tables.json
          columns: '["Component", "Before", "After"]'

      - name: Update PR description
        if: steps.check-ui-changes.outputs.has_ui_changes == 'true' && steps.check-image-differences.outputs.has_image_differences == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_body="# UI の変更確認
          以下のファイルのUI変更がありました：
          ${{ steps.changed-files.outputs.all_changed_files }}
          ${{ steps.generate-markdown.outputs.markdown }}

          変更内容を確認し、意図した通りの変更になっているかご確認ください。
          問題がなければ、\`flutter test --update-goldens --tags=golden\` を実行してGolden Imageを更新してください。"

          gh pr edit ${{ github.event.pull_request.number }} --body "$pr_body"

      - name: No UI changes detected
        if: steps.changed-files.outputs.any_changed == 'true' && steps.check-ui-changes.outputs.has_ui_changes != 'true' && steps.check-new-views.outputs.has_new_views != 'true'
        run: |
          rm -f pr_description.txt tables.json || true
